@page "/R_Verduras"
@page "/R_Verduras/{VerduraId:int}"


@inject VerdurasBLL verdurasBLL
@inject NotificationService notificationService


<EditForm Model="verdura" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="card">
        <div class="card-header">
            <h3>Registro Vitaminas</h3>
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">
        </div>
        <div class="card-bory">
            @*VerduraId*@
            <div class="form-row align-items-center">
                <div class="form-group">
                    <div class="container">
                        <label>VerduraId</label>
                        <InputNumber @bind-Value="verdura.VerduraId" />
                        <button type="button" class="btn btn-info input-group-text bi bi-google" @onclick="Buscar"> </button>
                    </div>
                </div>
            </div>
            @*Nombre*@
            <div class="form-group">
                <div class="container">
                    <label>Nombre</label>
                    <InputText @bind-Value="verdura.Nombre" class="col-4" />
                    <ValidationMessage For="@(() => verdura.Nombre)" />
                </div>
            </div>
        </div>
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary bi bi-person-plus-fill" @onclick="Nuevo"> Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success bi bi-save-fill"> Guardar</button>
                <button type="button" class="btn btn-lg btn-danger bi bi-trash2-fill" @onclick="Eliminar">Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>
@code
{
    [Parameter]
    public int VerduraId { get; set; }
    public Verduras verdura { get; set; } = new Verduras();

     public List<Verduras> lista { get; set; } = new List<Verduras>();
    protected override void OnInitialized()
    {
        if (VerduraId > 0)
        {
            this.verdura.VerduraId = VerduraId;
            this.Buscar();
        }
    }
    private void Buscar()
    {
        if (verdura.VerduraId > 0)
        {
            var encontrado = verdurasBLL.Buscar(verdura.VerduraId);

            if (encontrado != null)
                this.verdura = encontrado;
        }
    }
    public void Guardar()
    {

        bool guardo = verdurasBLL.Guardar(verdura);

        if (guardo)
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Guardado correctamente"
            });
            Nuevo();
        }
        else
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No se ha guardado correctamente"
            });
        }

    }
    public void Nuevo()
    {
        verdura = new Verduras();
    }
    public void Eliminar()
    {
        bool elimino;

        elimino = verdurasBLL.Eliminar(verdura);

        if (elimino)
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Eliminado correctamente"
            });
            Nuevo();
        }
        else
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "No se ha eliminado correctamente"
            });
        }
    }
    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);

    }
}
